---
AWSTemplateFormatVersion: '2010-09-09'

Description: Launch a custom Bootstrap

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "AWS Configuration"
      Parameters:
        - SubnetName
        - HostedZoneID
        - VpcID
        - SubnetIDs
        - SecurityGroupIDs
    -
      Label:
        default: "Top-level environment configuration"
      Parameters:
        - GitSSHPrivateKey

Parameters:  
  SubnetIDs:
    Description: Subnet IDs where the Lambda will run
    Type: List<AWS::EC2::Subnet::Id>

  SecurityGroupIDs:
    Description: Security group for Lambda
    Type: List<AWS::EC2::SecurityGroup::Id>

  HostedZoneID:
    Description: Hosted Zone ID
    Type: AWS::Route53::HostedZone::Id

  GitSSHPrivateKey:
      NoEcho: 'true'
      Description: Private SSH key to access repositories
      Type: String
  
  RepoURL:
      Description: Full ssh URL to configuration repository (starting with ssh://)
      Type: String

Resources:

  # SSM SecureString parameter for SSH Key
  MySSMSecureString:
    Type: Custom::SSMSecureString
    Properties:
      ServiceToken: !GetAtt SSMSecureStringCustomResource.Arn
      Name: '/my/securestring/data'
      Value: !Ref GitSSHPrivateKey
      Description: 'Dummy'

  # Git Repo URL for cloning
  MyRepoUrl:
    Type: Custom::RepoURL
    Properties:
      ServiceToken: !GetAtt RepoURLCustomResource.Arn
      Name: 'RepoURL'
      Value: !Ref RepoURL
      Test: 'bobba'
    DependsOn: MySSMSecureString

  # Custom resource to create/update/delete SSM securestring parameters
  SSMSecureStringCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Runtime: python3.7
      Timeout: 30
      Role: !GetAtt LambdaSSMSecureStringExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          import base64

          def parameter_exists(name):
            response = boto3.client('ssm').describe_parameters(
                ParameterFilters=[{
                    'Key': 'Name',
                    'Values': [
                        name
                    ]
                }]
            )
            return len(response["Parameters"]) > 0
                  
          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            # Get SSM parameter name
            name = event["ResourceProperties"]["Name"]
    
            # initialize our response
            response_data = {}
            response_status = cfnresponse.FAILED
            
            logger.info('Received event: {}'.format(json.dumps(event)))

            try:
              ssm=boto3.client('ssm')
            except Exception as e:
              logger.info('boto3.client failure: {}'.format(e))
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
            
            if event['RequestType'] in ['Create', 'Update']:
              if event["RequestType"] == "Create" and parameter_exists(name):
                cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

              response = boto3.client('ssm').put_parameter(
                Name=name,
                Description=event["ResourceProperties"]["Description"],
                Value=event["ResourceProperties"]["Value"],
                Type="SecureString",
                #KeyId=event["ResourceProperties"]["KeyId"],
                Overwrite=True
              )
              print(event["ResourceProperties"]["Value"])
              logger.info("Successfully stored parameter {}".format(name))

              cfnresponse.send(event, context, cfnresponse.SUCCESS, response, name)
              
            elif event['RequestType'] == 'Delete':
              boto3.client('ssm').delete_parameter(
                Name=event["PhysicalResourceId"],
              )
              logger.info("Successfully deleted parameter: {}".format(name))
              cfnresponse.send(event, context, cfnresponse.SUCCESS, None, name)
              

  # execution role for the SSM secure string custom resource function
  LambdaSSMSecureStringExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:DescribeParameters
              - ssm:DeleteParameter
            Resource: "*"

# Custom resource to for handling the Git Repo URL
  RepoURLCustomResource:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Environment:
        Variables:
          HOME: "/tmp"
      Runtime: python3.7
      Layers: [!Sub "arn:aws:lambda:${AWS::Region}:553035198032:layer:git:6","arn:aws:lambda:eu-central-1:381251817649:layer:Jinja2:2"]
      Timeout: 30
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIDs
        SubnetIds: !Ref SubnetIDs
      Role: !GetAtt LambdaRepoURLExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          from __future__ import print_function
          from distutils.dir_util import copy_tree
          from botocore.vendored import requests
          from jinja2 import Template
          import os,subprocess,json,boto3,logging,jinja2,urllib,re
          def handler(event,context):
            r='/';q='git %s %s';p=' && ';o='/tmp/template-environment-configuration';n='-rf';m='rm';l='eu-central-1';k='ssm';j='Value';T='application/';S='\n';R=True;Q='/tmp/id_rsa';P='RequestType';O='ResourceProperties';F=context;A=event;C=logging.getLogger();C.setLevel(logging.INFO);C.info('Received event: {}'.format(json.dumps(A)));B=A[O]['Name'];print(B);K=A[O][j];print(K);U=A[O]['Test'];print(U);G={}
            try:L=boto3.client(k)
            except Exception as V:C.info('boto3.client failure: {}'.format(V));send(A,F,FAILED,G)
            if A[P]=='Create':
              W='1234567890';s='0987654321';X='test';D=l;t='demo';u='https://jenkins.com';v='https://proxy.com';w='vpc-123456';Y='https://github.com/kentrikos/template-environment-configuration.git';Z=K;a='clone --depth 1 -b jinja_templating --single-branch';b='remote add origin';subprocess.run([m,n,o]);subprocess.run([m,n,Q]);os.environ['GIT_SSH_COMMAND']='ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /tmp/id_rsa';L=boto3.client(k);c=L.get_parameter(Name='/my/securestring/data',WithDecryption=R);E=c['Parameter'][j];d=re.search('^(-----BEGIN ([^-]+)-----)',E).group(0);e=re.search('(-----END ([^-]+)-----)',E).group(0);H=re.sub('^\\s*(?:\\-+(?:.*?)\\-+)?\\s*((?:[A-Za-z0-9\\+\\/]\\s?)+={0,2})\\s*(?:\\-+(?:.*?)\\-+)?\\s*$','\\g<1>',E);H=H.replace(' ',S);E=d+S+H+S+e+'\n ';M=open(Q,'w+');M.write(E);M.close();subprocess.run(['chmod','700',Q]);x=subprocess.check_output(p.join(['git config --global --add user.email "example@example.com"','git config --global --add user.name "example"','cd /tmp',q%(a,Y)]),stderr=subprocess.STDOUT,shell=R).decode();os.chdir(o);y=os.getcwd();D=l;I='operations/region';J='operations/'+D+r;copy_tree(I,J);I='application/region';J=T+D+r;copy_tree(I,J);f=T+D+'/terraform.template.tfvars'
              with open(f)as g:h=Template(g.read())
              i=h.render(application_aws_account_number=W,environment_type=X);N=open(T+D+'/terraform.tfvars','w');N.write(i);N.close();z=subprocess.check_output(p.join(['cd /tmp/template-environment-configuration','rm -rf .git','git init',q%(b,Z),'git add .','git commit -m initial','git push --force -u origin master']),stderr=subprocess.STDOUT,shell=R).decode();C.info('Successfully retrieved parameter {}'.format(B));send(A,F,SUCCESS,G,B)
            if A[P]=='Update':C.info('Successfully updated parameter {}'.format(B));send(A,F,SUCCESS,G,B)
            elif A[P]=='Delete':C.info('Successfully deleted parameter: {}'.format(B));send(A,F,SUCCESS,None,B)
          SUCCESS='SUCCESS'
          FAILED='FAILED'
          def send(event,context,responseStatus,responseData,physicalResourceId=None,noEcho=False):
            K='LogicalResourceId';J='RequestId';I='StackId';D=context;B=event;E=B['ResponseURL'];print(E);A={};A['Status']=responseStatus;A['Reason']='See the details in CloudWatch Log Stream: '+D.log_stream_name;A['PhysicalResourceId']=physicalResourceId or D.log_stream_name;A[I]=B[I];A[J]=B[J];A[K]=B[K];A['NoEcho']=noEcho;A['Data']=responseData;C=json.dumps(A);print('Response body:\n'+C);F={'content-type':'','content-length':str(len(C))}
            try:G=requests.put(E,data=C,headers=F);print('Status code: '+G.reason)
            except Exception as H:print('send(..) failed executing requests.put(..): '+str(H))
                
    DependsOn: SSMSecureStringCustomResource

  # execution role for the SSM secure string custom resource function
  LambdaRepoURLExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
            Resource: "*"

# Outputs - Display function output

Outputs:
  AWSRegion:
    Value: !Ref "AWS::Region"
  
  AWSAccount:
    Value: !Ref "AWS::AccountId"

  TestURL:
    Value: "https://eu-central-1.console.aws.amazon.com/cloudformation/home?region=eu-central-1#/stacks/quickcreate?templateUrl=https%3A%2F%2Fkentrikosdemo.s3.eu-central-1.amazonaws.com%2FCustomBootstrap.yaml&stackName=henriktest&param_HostedZoneID=ABC123&param_RepoURL=gitssh"
